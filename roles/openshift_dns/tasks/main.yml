---
# Remove all old directories and files.
- name: Removing any old directories or files from previous attempts
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "dns_vars.yml"
    - "openshift-ansible-contrib"

# Set a variable for the ansible-playbook.
- name: Setting the ansible-playbook variable
  set_fact:
    ansible_playbook: "source {{ openstack_rc }}; ansible-playbook"

# Print the values that will be used for openshift-ansible-contrib.
- name: Printing the values used to clone openshift-ansible-contrib
  debug:
    msg: "openshift-ansible-contrib repository: {{ openshift_ansible_contrib_repo }} {{ openshift_ansible_contrib_version }}"

# Get a fresh clone of the openshift-ansible-contrib GitHub project.
- name: Cloning the openshift-ansible-contrib repository
  git:
    dest: "{{ ansible_user_dir }}/openshift-ansible-contrib"
    # Specify the repo as a variable to test other people's repositories.
    repo: "{{ openshift_ansible_contrib_repo }}"
    # Specify a version for a different branch, tag, or hash to verify PRs.
    version: "{{ openshift_ansible_contrib_version }}"

# Generate the DNS update key with rndc-confgen.
- name: Generating the DNS update key
  # The key name (-k) is important here and must match the key_name in all.yml.
  command: "/usr/sbin/rndc-confgen -a -A {{ dns_key_algorithm }} -c {{ dns_key_file }} -k {{ dns_key_name }} -r /dev/urandom"

# Read the DNS update key file.
- name: Reading the remote {{ dns_key_file }} file
  command: "grep secret {{ dns_key_file }}"
  register: update_secret
  changed_when: false

# Create a regular expression to get the secret key.
- name: Setting the regular expression to find the secret
  set_fact:
    # Example:        secret "8kjyy/xFvzapFwmcWwLzvA==";
    secret_regex: 'secret "(.*)";'

# Set the DNS secret value.
- name: Creating a variable with the DNS secret value
  set_fact:
    dns_key_secret: "{{ update_secret['stdout']|regex_findall(secret_regex)|first }}"

# Render the dns variable file and copy it to the target-host.
- name: Rendering the DNS variable file to the target-host
  template:
    src: dns_vars.yml.j2
    dest: "{{ ansible_user_dir }}/dns_vars.yml"

# Set the path for the DNS install log file.
- name: Creating the DNS install log file variable
  set_fact:
    dns_install_log: "{{ ansible_user_dir }}/dns_install.log"

# Run the Ansible playbook that creates the DNS server.
- name: Creating the DNS server
  shell: "{{ ansible_playbook }} -vvv --key-file {{ ansible_user_dir }}/.ssh/id_rsa -e @dns_vars.yml openshift-ansible-contrib/reference-architecture/osp-dns/deploy-dns.yaml 2>&1 > {{ dns_install_log }}"
  args:
    # Use bash to get the posix style redirects.
    executable: /bin/bash

# The openstack variable includes the rc file and the path to the OpenStack client.
- name: Setting the openstack variable to source the rc file and contain path to client
  set_fact:
    openstack: "source {{ openstack_rc }}; {{ openstack_location }}"

# Get the DNS server addresses from OpenStack.
- name: Getting the IP address for the DNS VM ns-master
  shell: "{{ openstack }} server show ns-master.{{ clusterid }}.{{ dns_domain }} --format value -c addresses"
  # "ns-master-scale-ci.example.com-net=192.168.99.17, 172.21.0.129"
  register: dns_addresses
  changed_when: false

# Parse the IP address from the addresses output.
- name: Parsing the floating ip from the DNS VM addresses
  set_fact:
    cluster_dns_ip: "{{ dns_addresses['stdout'].split(', ')[1] }}"
  failed_when: cluster_dns_ip == ""

# Set the information to update the public DNS records.
- name: Setting the DNS public update information
  set_fact:
    dns_public_info: { key_algorithm: "{{ dns_key_algorithm }}", key_name: "{{ dns_key_name }}", key_secret: "{{ dns_key_secret }}", server: "{{ cluster_dns_ip }}" }

# Set the information to update the private DNS records.
- name: Setting the DNS private update information
  set_fact:
    dns_private_info: { key_algorithm: "{{ dns_key_algorithm }}", key_name: "{{ dns_key_name }}", key_secret: "{{ dns_key_secret }}", server: "{{ cluster_dns_ip }}" }

# Set the OpenShift update keys with the public and private information.
- name: Setting the OpenShift name server update keys
  set_fact:
    nsupdate_keys: { openshift_openstack_dns_nameservers: ["{{ cluster_dns_ip }}"], openshift_openstack_external_nsupdate_keys: { public: "{{ dns_public_info }}", private: "{{ dns_private_info }}" } }

# Write the OpenShift update keys to a YAML file.
- name: Writing the OpenShift name server update keys to a file
  copy:
    content: "{{ nsupdate_keys|to_nice_yaml }}"
    dest: "{{ nsupdate_file }}"
