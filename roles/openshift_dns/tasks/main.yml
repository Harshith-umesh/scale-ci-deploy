---
# Remove all old directories and files.
- name: Removing any old directories or files from previous attempts
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "dns_vars.yml"
    - "openshift-ansible-contrib"

# Set a variable for the ansible-playbook.
- name: Setting the ansible-playbook variable
  set_fact:
    ansible_playbook: "source {{ openstack_rc }}; ansible-playbook"

# Print the values that will be used for openshift-ansible-contrib.
- name: Printing the values used to clone openshift-ansible-contrib
  debug:
    msg: "openshift-ansible-contrib repository: {{ openshift_ansible_contrib_repo }} {{ openshift_ansible_contrib_version }}"

# Get a fresh clone of the openshift-ansible-contrib GitHub project.
- name: Cloning the openshift-ansible-contrib repository
  git:
    dest: "{{ ansible_user_dir }}/openshift-ansible-contrib"
    # Specify the repo as a variable to test other people's repositories.
    repo: "{{ openshift_ansible_contrib_repo }}"
    # Specify a version for a different branch, tag, or hash to verify PRs.
    version: "{{ openshift_ansible_contrib_version }}"

# Generate the DNS update key with rndc-confgen.
- name: Generating the DNS update key
  # The algorithm needs to be hmac-sha256 or named service will refuse to start.
  command: "/usr/sbin/rndc-confgen -a -A hmac-sha256 -c update.key -k update-key -r /dev/urandom"

# Read the DNS update.key file.
- name: Reading the remote update.key file
  command: "grep secret update.key"
  register: update_secret
  changed_when: false

# Create a regular expression to get the secret key.
- name: Setting the regular expression to find the secret
  set_fact:
    # Example:        secret "8kjyy/xFvzapFwmcWwLzvA==";
    secret_regex: 'secret "(.*)";'

# Set the DNS secret value.
- name: Creating a variable with the DNS secret value
  set_fact:
    update_key_secret: "{{ update_secret['stdout']|regex_findall(secret_regex)|first }}"

# Render the dns variable file and copy it to the target-host.
- name: Rendering the DNS variable file to the target-host
  template:
    src: dns_vars.yml.j2
    dest: "{{ ansible_user_dir }}/dns_vars.yml"

# Set the path for the DNS install log file.
- name: Creating the DNS install log file variable
  set_fact:
    dns_install_log: "{{ ansible_user_dir }}/dns_install.log"

# Run the Ansible playbook that creates the DNS server.
- name: Creating the DNS server
  shell: "{{ ansible_playbook }} -vvv --key-file ~/.ssh/id_rsa -e @dns_vars.yml openshift-ansible-contrib/reference-architecture/osp-dns/deploy-dns.yaml 2>&1 > {{ dns_install_log }}"
  args:
    # Use bash to get the posix style redirects.
    executable: /bin/bash
