---
# Some cloud images only have python3 installed, Ansible needs python2 to run.
- name: Bootstrapping Python on this system
  become: true
  # Use the raw module to ensure that python2 in installed on this system.
  raw: yum --assumeyes --debuglevel 1 --errorlevel 1 install python
  register: install_python_result
  until: install_python_result['rc'] == 0
  retries: 3
  delay: 2
  # Ignore errors, the next task will fail if python2 is not installed.
  ignore_errors: true

# With python2 installed Ansible should be able to gather facts.
- name: Gathering facts on the target host
  # Need the facts to get the ansible_distribution for OS identification.
  setup:
    filter: ansible_*

# In some cases the yum cache could be invalid, clean cache before installing.
- name: Cleaning the yum cache
  become: true
  # Using raw, because the Python yum package may not be installed.
  raw: rm -fr /var/cache/yum/*; yum clean all;
  when: clean_yum_cache

# Install the common operating system packages on the host.
- name: Installing the common operating system software packages
  become: true
  # Using raw, because the Python yum package may not be installed.
  raw: yum --assumeyes --debuglevel 1 --errorlevel 1 install {{ item }}
  with_items: "{{ packages['common'] }}"
  register: install_common_result
  until: install_common_result['rc'] == 0
  retries: 3
  delay: 2

# Install operating system specific packages on the host.
- name: Installing operating system specific software packages
  become: true
  # Using raw, because the Python yum package may not be installed.
  raw: yum --assumeyes --debuglevel 1 --errorlevel 1 install {{ item }}
  with_items: "{{ packages[ ansible_distribution ] }}"
  register: install_specific_result
  until: install_specific_result['rc'] == 0
  retries: 3
  delay: 2

# Create a virtual Python environment to contain python packages.
- name: Creating a virtual Python environment to install requirements
  command: "virtualenv {{ virtualenv_directory }}"
  when: virtualenv_directory is defined

# Change the path to the virtual environment if necessary.
- name: Changing the pip path to the virtual Python environment
  set_fact:
    pip: "{{ virtualenv_directory }}/bin/pip"
  when: virtualenv_directory is defined

# Upgrade setuptools to the latest level before installing modules.
- name: Upgrade setuptools
  command: "{{ pip }} install --upgrade setuptools"
  # Only become root when the virtual environment directory is not defined.
  become: "{{ virtualenv_directory is not defined }}"

# Install the Python packages using pip with the command module.
- name: Installing the Python packages
  # Only become root when the virtual environment directory is not defined.
  become: "{{ virtualenv_directory is not defined }}"
  # Using command module because the Ansible pip module may not be installed.
  command: "{{ pip }} install {{ item }}"
  with_items: "{{ packages['python'] }}"

# Create a .ssh directory if one does not already exist.
- name: Creating the {{ ansible_user_dir }}/.ssh directory on the target host
  file:
    path: "{{ ansible_user_dir }}/.ssh"
    state: directory
    mode: 0700

# Copy the private key so this user can access the OpenShift servers.
- name: Copying the private key to the target host
  copy:
    src: "{{ ansible_private_key_file }}"
    dest: "{{ ansible_user_dir }}/.ssh/id_rsa"
    mode: 0600

# Copy the public key to the target host.
- name: Copying the public key to the target host
  copy:
    src: "{{ ansible_public_key_file }}"
    dest: "{{ ansible_user_dir }}/.ssh/id_rsa.pub"
    mode: 0644

# Add the public key to the root user's authorized_keys file.
- name: Copying the public key to the root user's authorized_keys
  copy:
    src: "{{ ansible_public_key_file }}"
    dest: /root/.ssh/authorized_keys
    mode: 0600
  become: true

# Change the sshd configuration.
- name: Changing the sshd configuration
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "{{ item['find'] }}"
    line: "{{ item['replace'] }}"
  with_items:
    # ClientAliveCountMax the number of client alive messages which may be sent without the ssh server receiving any messages back from the client.
    - { find: "^#?ClientAliveCountMax.*", replace: "ClientAliveCountMax 3" }
    # ClientAliveInterval a timeout interval in seconds after which if no data has been received from the client, sshd server will send an alive message.
    - { find: "^#?ClientAliveInterval.*", replace: "ClientAliveInterval 20" }
    # PermitRootLogin specifies whether root can log in using ssh.
    - { find: "^#?PermitRootLogin.*", replace: "PermitRootLogin yes"}
  become: true

# Restart the sshd service to enable the changes.
- name: Restarting the sshd service
  service:
    name: sshd
    state: restarted
  become: true

# Copy the OpenStack rc file from the Ansible host to the target host.
- name: Copying the OpenStack rc file from Ansible host to target host
  copy:
    src: "{{ playbook_dir }}/openstackrc"
    dest: "{{ openstack_rc }}"

# Create the log directory on the target host
- name: Create the log directory on the target host
  file:
    path: "{{ log_directory }}"
    state: directory
