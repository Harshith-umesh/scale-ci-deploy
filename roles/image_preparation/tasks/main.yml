---
# Get all the atomic files matching the pattern.
- name: Searching for the ocp-{{ ocp_major_minor }} files in {{ image_directory }}/atomic
  find:
    paths: "{{ image_directory }}/atomic"
    # Example: 2017-11-12-ocp-3.7.7-1-atomic-gold.raw
    patterns: "([0-9]+-[0-9]+-[0-9]+)-ocp-({{ ocp_major_minor }}.+)-.+raw$"
    use_regex: yes
  register: atomic_images
  when: atomic_image == ""

# Reverse sort by mtime and the first file is the latest atomic image.
- name: Finding the latest atomic file
  set_fact:
    # mtime = Time of last modification.
    atomic_image: "{{ (atomic_images['files']|sort(attribute='mtime',reverse=true)|first)['path'] }}"
  when: atomic_image == ""

# Get all the rhel files matching the pattern.
- name: Searching for the ocp-{{ ocp_major_minor }} files in {{ image_directory }}/rhel
  find:
    paths: "{{ image_directory }}/rhel"
    # Example: 2017-12-02-ocp-3.7.11-1-rhel-gold.raw
    patterns: "([0-9]+-[0-9]+-[0-9]+)-ocp-({{ ocp_major_minor }}.+)-.+raw$"
    use_regex: yes
  register: rhel_images
  when: rhel_image == ""

# Reverse sort by mtime and the first file is the latest rhel image.
- name: Finding the latest rhel file
  set_fact:
    # mtime = Time of last modification.
    rhel_image: "{{ (rhel_images['files']|sort(attribute='mtime',reverse=true)|first)['path'] }}"
  when: rhel_image == ""

# Create a list of the files to convert, transfer, and upload.
- name: Creating the list of files from the atomic and rhel images
  set_fact:
    files: "{{ [ atomic_image, rhel_image ] }}"

# Create a compressed archive of the images.
- name: Creating a compressed archive of the images
  archive:
    path: "{{ files }}"
    dest: "{{ web_root }}/images.tar.gz"

# Create the image directories on the remote host.
- name: "Creating the {{ remote_image_directory }} on {{ remote_host }}"
  file:
    path: "{{ remote_image_directory }}"
    state: directory
  delegate_to: "{{ remote_host }}"

# Copy the images from image server to the remote host.
- name: "Copying the files from the image server to {{ remote_host }}"
  get_url:
    dest: "{{ remote_image_directory }}/images.tar.gz"
    url: "http://{{ groups['image-server'][0] }}/images.tar.gz"
  delegate_to: "{{ remote_host }}"

# Uncompress the archive on the remote host.
- name: Uncompress the archive on the remote host
  unarchive:
    src: "{{ remote_image_directory }}/images.tar.gz"
    dest: "{{ remote_image_directory }}/"
  delegate_to: "{{ remote_host }}"
